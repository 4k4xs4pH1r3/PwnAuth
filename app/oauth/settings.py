"""
Django settings for oauth project.

Generated by 'django-admin startproject' using Django 1.11.6.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""


import logging
import logging.config
import logging.handlers
import os

if os.getenv('DOCKER_CONTAINER'):
    POSTGRES_HOST = 'db'
else:
    POSTGRES_HOST = '127.0.0.1'


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', '%=we7z9!5q0tojpv^lm)lcb@tdp4@thjfs7nrvkojdc^gq2cg2')

# SECURITY WARNING: don't run with debug turned on in production!
if os.getenv('DJANGO_ENV') == 'prod':
    DEBUG = False
    ALLOWED_HOSTS = [os.getenv('DJANGO_SITE')]
else:
    DEBUG = True
    ALLOWED_HOSTS = ['127.0.0.1', 'localhost']

SITE_ID = 1

OAUTH_MODULES = [
    'oauth_office365.apps.OauthOffice365Config',
    'oauth_manager.apps.OauthManagerConfig',
]

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'rest_framework',
    'rest_framework_swagger',
    'sslserver',
] + OAUTH_MODULES

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.sites.middleware.CurrentSiteMiddleware'
]

ROOT_URLCONF = 'oauth.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'oauth.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'oauthdb',
        'USER': 'oauth',
        'PASSWORD': 'oauth',
        'HOST': POSTGRES_HOST,
        'PORT': '5432',
    }
}

MIGRATION_MODULES = {
    'sites': 'oauth.migrations.site_migrations',
}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = '/opt/app/static'

# Rest Framework Global Settings
REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.TemplateHTMLRenderer',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    )
}

LOGIN_REDIRECT_URL = '/oauth'
LOGIN_URL = 'login'
LOGOUT_REDIRECT_URL = 'login'


class RequireAuditFilter(logging.Filter):
    def filter(self, record):
        if record.levelname == 'INFO':
            return True
        return False


class RequireDebugLevel(logging.Filter):
    def filter(self, record):
        return record.levelname == 'DEBUG'


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(asctime)s %(message)s'
        },
        'action': {
            'format': '%(asctime)s:::%(name)s:::%(user)s:::%(message)s'
        }
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue'
        },
        'require_audit': {
            '()': 'oauth.settings.RequireAuditFilter'
        },
        'require_debug_level': {
            '()': 'oauth.settings.RequireDebugLevel'
        }
    },
    'handlers': {
        'email_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
        },
        'error_log': {
            'level': 'ERROR',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.getenv('ERROR_LOG', 'error.log'),
            'when': 'midnight',
            'backupCount': 0,
            'formatter': 'verbose'
        },
        'debug_log': {
            'level': 'DEBUG',
            'filters': ['require_debug_true', ],
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.getenv('DEBUG_LOG', 'debug.log'),
            'when': 'midnight',
            'backupCount': 0,
            'formatter': 'simple'

        },
        'audit_log': {
            'level': 'INFO',
            'filters': ['require_audit'],
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.getenv('AUDIT_LOG', 'audit.log'),
            'when': 'midnight',
            'backupCount': 0,
            'formatter': 'action'
        },
    },
    'loggers': {
        'django': {
            'handlers': ['error_log', 'debug_log'],
            'propagate': True
        },
        'django.request': {
            'handlers': ['error_log', 'email_admins'],
            'level': 'ERROR',
            'propagate': False
        },
        'oauth': {
            'handlers': ['audit_log', 'error_log', 'debug_log'],
            'level': 'INFO',
            'propagate': False
        }
    }
}
